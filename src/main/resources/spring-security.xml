<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.0.xsd">

      <!-- 项目实现的用户查询服务,将用户信息查询出来 -->
    <beans:bean id="UserDetailService" class="com.ipanel.web.sysUser.service.impl.UserDetailService" />
        
    <!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <authentication-manager alias="customerAuthenticationManager">
        <authentication-provider user-service-ref="UserDetailService">
            <!--   如果用户的密码采用加密的话，可以加点“盐”
                <password-encoder hash="md5" />
            -->
        </authentication-provider>
    </authentication-manager>
    
    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <beans:bean id="customerAccessDecisionManager" class="com.ipanel.web.common.interceptors.CustomerAccessDecisionManager"></beans:bean>
    
    
    <!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="customerSecurityMetadataSource" class="com.ipanel.web.common.interceptors.InvocationSecurityMetadataSource" ></beans:bean>
    
    
     <!-- 未登录的切入点 -->  
    <beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">  
        <beans:property name="loginFormUrl" value="/index"></beans:property>  
    </beans:bean> 
    
    <beans:bean id="customerFilter" class="com.ipanel.web.common.interceptors.FilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="customerAuthenticationManager" />
        <beans:property name="accessDecisionManager" ref="customerAccessDecisionManager" />
        <beans:property name="securityMetadataSource" ref="customerSecurityMetadataSource" />
    </beans:bean>
    
    <beans:bean id="customWebInvocationPrivilegeEvaluator"  class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator">
  		<beans:constructor-arg name="securityInterceptor" ref="customerFilter" />
 	 </beans:bean>
    
    
     <!-- 自定义登录验证器 -->  
    <beans:bean id="loginFilter"  class="com.ipanel.web.common.interceptors.CustomerUsernamePasswordAuthenticationFilter">  
        <!-- 处理登录的action -->  
        <beans:property name="filterProcessesUrl" value="/user_login"></beans:property>  
        <!-- 验证成功后的处理-->  
        <beans:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"></beans:property>  
        <!-- 验证失败后的处理-->  
        <beans:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"></beans:property>  
        <beans:property name="authenticationManager" ref="customerAuthenticationManager"></beans:property>  
    </beans:bean>  
    
    <beans:bean id="loginLogAuthenticationSuccessHandler"   class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">  
        <beans:property name="defaultTargetUrl" value="/index"></beans:property>  <!-- 登录成功后的跳转url -->
    </beans:bean>  
    
    <beans:bean id="simpleUrlAuthenticationFailureHandler"  class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">  
        <!-- 可以配置相应的跳转方式。属性forwardToDestination为true采用forward false为sendRedirect -->  
        <beans:property name="defaultFailureUrl" value="/loginError"></beans:property>   <!-- 登录失败后的跳转url -->
    </beans:bean>  
    
    
     <http entry-point-ref="authenticationProcessingFilterEntryPoint" use-expressions="true">
        <intercept-url pattern="/source/**" filters="none" />  
    	<logout invalidate-session="true"
    		logout-success-url="/index"
    		logout-url="/logout"/>
    	
    	<access-denied-handler error-page="/accessDenied/handle"/> <!-- 访问没有权限的资源时的处理 -->
    	<custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER"  />	 <!--  自定义的登录认证 -->
    	<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="customerFilter" /> <!-- 自定义的权限管理 -->
    </http>
</beans:beans>
